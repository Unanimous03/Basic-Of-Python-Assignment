1.	Explain the key feature of Python that make it popular choice for programming.

Python is a widely used programming language that offers several unique features.
Such as 
•	Easy to use and Read - Python's syntax is clear and easy to read, making it an ideal language for both beginners and experienced programmers. This simplicity can lead to faster development and reduce the chances of errors.
•	Dynamically Typed - The data types of variables are determined during run-time. We do not need to specify the data type of a variable during writing codes.
•	High-level - High-level language means human readable code.
•	Compiled and Interpreted - Python code first gets compiled into bytecode, and then interpreted line by line. Python is considered to be Complied and Interpreted both.
•	Garbage Collected - Memory allocation and de-allocation are automatically managed. Programmers do not specifically need to manage the memory.
•	Purely Object-Oriented - It refers to everything as an object, including numbers and strings.
•	Cross-platform Compatibility - Python can be easily installed on Windows, macOS, and various Linux distributions, allowing developers to create software that runs across different operating systems.
•	Rich Standard Library - Python comes with several standard libraries that provide ready-to-use modules and functions for various tasks, ranging from web development and data manipulation to machine learning and networking.
•	Open Source - Python is an open-source, cost-free programming language. It is utilized in several sectors and disciplines as a result.
Python has many web-based assets, open-source projects, and a vibrant community. Learning the language, working together on projects, and contributing to the Python ecosystem are all made very easy for developers.
Because of its straightforward language framework, Python is easier to understand and write code in. This makes it a fantastic programming language for novices. Additionally, it assists seasoned programmers in writing clear and error-free code.
Python has many third-party libraries that can be used to make its functionality easier. These libraries cover many domains, for example, web development, scientific computing, data analysis, and more.

2.	Describe the role of predefined keywords in python and provide examples of how they are used in program.

Python Keywords are some predefined words in Python that have special meanings. Keywords are used to define the syntax of the coding. The keyword cannot be used as an identifier, function, or variable name. All the keywords in Python are written in lowercase except True and False. 
There are 35 keywords in Python 3.11.

and:
This is a logical operator which returns true if both the operands are true else returns false.
Example:
x = 5
y = 3
if (x > 2 and y > 2):
print("Both the conditions are true")
	O/P - Both the conditions are true.
	
	Or:
	This is also a logical operator which returns true if anyone operand is true else returns false.
	x = 5
	y = 3
	if (x > 2 or y > 5):
		print("At least one condition is true")
	O/P - At least one condition is true.
	
	not:
	This is again a logical operator it returns True if the operand is false else returns false.
	x = 5 
	if not x > 10:
		print("x is not greater than 10")
	O/P - x is not greater than 10.
	
	If:
	This is used to make a conditional statement.
	age = 18

	if age >= 18:
	print("You are eligible to vote.")
	O/P - You are eligible to vote.
	
	Ifelse:
Else is used with if and elif conditional statements. The else block is executed if the given condition is not true.
	temperature = 50
	if temperature > 35:
		print("It's a hot day.")
	else:
		print("It's a cool day.")
	O/P - It's a hot day.
	
	elif:	
Elif is a condition statement used with an if statement. The elif statement is executed if the previous conditions were not true.
score = 85

if score >= 90:
print("Grade: A")
elif score >= 80:
print("Grade: B")
elif score >= 70:
print("Grade: C")
elif score >= 60:
print("Grade: D")
else:
print("Grade: F")
	O/P - Grade: B
	
	For:
	In Python, we use a for loop to iterate over sequences such as lists, strings, dictionaries, etc.	
	places = ["Delhi", "Bihar", "Varanasi"]
	for places in places:
		 print(places)
	O/P - Delhi
		Bihar
Varanasi

	While:
	In Python, we use a while loop to repeat a block of code until a certain condition is met.
	number = 2

	while number <= 5:
		print(number)
		number = number + 1
	O/P –
	2
	3
	4
	5	
	
	Break:
	The break statement terminates the loop immediately when it's encountered.
	for i in range(10):
	  if i == 8:
	break
	 print(i)
	0/P – 
0
1
2
3
4
5
6
7
	
	Continue:
	for i in range(10):
	if i == 6:
	continue
	 print(i)
	O/P -  
0
1
2
3
4
5
7
8
9

	True:
The true keyword is a Boolean value, and result of a comparison operation. The true keyword is the same as 1
print(10 > 9)
print(10 == 9)
print(10 < 9)
O/P - True
	False
False
	
	false:
The False keyword is a Boolean value, and result of a comparison operation. The False keyword is the same as 0
print(8> 9)
print(10 == 9)
print(10 < 9)
O/P - False
	False
False

3.	Compare and contrast mutable and immutable objects in python in with examples.
Python data type is categorized into two types:
Mutable Data Type – A mutable data type is those whose values can be changed.
Example: List, Dictionaries, and Set.

my_list = [1, 2, 3]
my_list.append(4)  # modifies the original list
print(my_list)  # [1, 2, 3, 4]

O/P - [1, 2, 3, 4]

Immutable Data Type – An immutable data type is one in which the values can’t be changed or altered.
Example: String and Tuples.

tuple1 = (0, 1, 2, 3) 
tuple1[0] = 4
	print(tuple1)
O/P -  Error
	Traceback (most recent call last):
	File "e0eaddff843a8695575daec34506f126.py", line 3, in 
tuple1[0]=4
TypeError: 'tuple' object does not support item assignment.

4.	Discuss the different types of operators in python and provide example how they are used.
	Operators are used to perform operations on variables and values.
	Python divides the operators in the following groups:
•	Arithmetic operators
•	Assignment operators
•	Comparison operators
•	Logical operators
•	Identity operators
•	Membership operators
•	Bitwise operators

Arithmetic operators:
Arithmetic operators are used with numeric values to perform common mathematical operations:
Addition (+)
x =5
y = 4
(x+y) = 5+4
           = 9
Subtraction (-)
x = 5
y = 4
(x-y) = 5-4
         =1
Multiplication (*)
x = 5
y = 4
(x*y) = 5*4
          20
Division (/)
X = 20
Y = 4
(x/y)  =20/4
          =5
Modulus (%)
x = 7
y = 3
(x%y) = 7%3
          =1
Exponentiation (**)
x = 2
y = 5
(x**y) = 2**5
            = 32

Floor division (//)
    	 x = 7
     	y = 2
      	(x//y) = 7//2
                =3

Comparison operators:
Comparison operators are used to compare two values:


Equal(==)				
x == y
x = 5
y = 3

print(x == y)
	
# returns False because 5 is not equal to 3
	
Not equal(!=)				
x != y	
x = 5
y = 3

print(x != y)

# returns True because 5 is not equal to 3
	
Greater than(>)			
x > y	
x = 5
y = 3

print(x > y)

# returns True because 5 is greater than 3

Less than(<)			
x < y	
x = 5
y = 3

print(x < y)

# returns False because 5 is not less than 3

Greater than or equal to(>=)	
x >= y
x = 5
y = 3

print(x >= y)

# returns True because five is greater, or equal, to 3
	
Less than or equal to(<=)		
x <= y
x = 5
y = 3

print(x <= y)

# returns False because 5 is neither less than or equal to 3

	Logical Operators
Logical operators are used to combine conditional statements:

	and 	
	Returns True if both statements are true	
	x < 5 and  x< 10	
	x = 5

	print(x > 3 and x < 10)

	# returns True because 5 is greater than 3 AND 5 is less than 10

	or	
	Returns True if one of the statements is true	
	x < 5 or x < 4	
	x = 5

	print(x > 3 or x < 4)

	# returns True because one of the conditions are true (5 is greater than 3, but 5 is not less than 4)

	not	
	Reverse the result, returns False if the result is true	
	Not(x < 5 and x < 10)
	x = 5

	print(not(x > 3 and x < 10))

	# returns False because not is used to reverse the result

Assignment Operators:
Assignment operators are used to assign values to variables:

Assignment(=)	
x = 5	
print (x)
5	

Addition Assignment(+=)	
x = 5

x += 3

print(x) = 8

Subtraction Assignment( -=)	
x -= 3	
x = x - 3	
print(x) = 2


Multiplication Assignment (*=)	
X = 5
x *= 3	
x = x * 3

print(x)	= 15

Division Assignment (/=)	
x /= 3	
x = x / 3

print(x) = 1.66666666666667

Identity Operators:
Identity operators are used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location:


”Is”
Returns True if both variables are the same object

x = ["apple", "banana"]
y = ["apple", "banana"]
z = x

print(x is z)

# returns True because z is the same object as x

print(x is y)

# returns False because x is not the same object as y, even if they have the same content

print(x == y)

# to demonstrate the difference betweeen "is" and "==": this comparison returns True because x is equal to y

“is not”
Returns True if both variables are not the same object	
x is not y

x = ["apple", "banana"]
y = ["apple", "banana"]
z = x

print(x is not z)

# returns False because z is the same object as x

print(x is not y)

# returns True because x is not the same object as y, even if they have the same content

print(x != y)

# to demonstrate the difference betweeen "is not" and "!=": this comparison returns False because x is equal to y

Membership Operators
Membership operators are used to test if a sequence is presented in an object:
“in “	
Returns True if a sequence with the specified value is present in the object	
x in y	
x = ["apple", "banana"]

print("banana" in x)

# returns True because a sequence with the value "banana" is in the list.

“not in”
Returns True if a sequence with the specified value is not present in the object	
x not in y
x = ["apple", "banana"]

print("pineapple" not in x)

# returns True because a sequence with the value "pineapple" is not in the list.
Bitwise Operators
&(AND)	
The & operator compares each bit and set it to 1 if both are 1, otherwise it is set to 0:	
x & y	

print(6 & 3)

6 = 0000000000000110
3 = 0000000000000011

2 = 0000000000000010

Decimal numbers and their binary values:
0 = 0000000000000000
1 = 0000000000000001
2 = 0000000000000010
3 = 0000000000000011
4 = 0000000000000100
5 = 0000000000000101
6 = 0000000000000110
7 = 0000000000000111	

|(OR)	
The | operator compares each bit and set it to 1 if one or both is 1, otherwise it is set to 0:	
x | y	
print(6 | 3)

6 = 0000000000000110
3 = 0000000000000011

7 = 0000000000000111

Decimal numbers and their binary values:
0 = 0000000000000000
1 = 0000000000000001
2 = 0000000000000010
3 = 0000000000000011
4 = 0000000000000100
5 = 0000000000000101
6 = 0000000000000110
7 = 0000000000000111

^(XOR)
The ^ operator compares each bit and set it to 1 if only one is 1, otherwise (if both are 1 or both are 0) it is set to 0:
x ^ y	
print(6 ^ 3)
6 = 0000000000000110
3 = 0000000000000011

5 = 0000000000000101

Decimal numbers and their binary values:
0 = 0000000000000000
1 = 0000000000000001
2 = 0000000000000010
3 = 0000000000000011
4 = 0000000000000100
5 = 0000000000000101
6 = 0000000000000110
7 = 0000000000000111
~(NOT)	
~x
The ~ operator inverts each bit (0 becomes 1 and 1 becomes 0).
print(~3)
Inverted 3 becomes -4:
 3 = 0000000000000011
-4 = 1111111111111100

Decimal numbers and their binary values:
 4 = 0000000000000100
 3 = 0000000000000011
 2 = 0000000000000010
 1 = 0000000000000001
 0 = 0000000000000000
-1 = 1111111111111111
-2 = 1111111111111110
-3 = 1111111111111101
-4 = 1111111111111100	

<<(Zero fill left shift)
The << operator inserts the specified number of 0's (in this case 2) from the right and let the same amount of leftmost bits fall off:	
print(3 << 2)

If you push 00 in from the left:
 3 = 0000000000000011
becomes
12 = 0000000000001100

Decimal numbers and their binary values:
 0 = 0000000000000000
 1 = 0000000000000001
 2 = 0000000000000010
 3 = 0000000000000011
 4 = 0000000000000100
 5 = 0000000000000101
 6 = 0000000000000110
 7 = 0000000000000111
 8 = 0000000000001000
 9 = 0000000000001001
10 = 0000000000001010
11 = 0000000000001011
12 = 0000000000001100

>>(Signed right shift)	
The >> operator moves each bit the specified number of times to the right. Empty holes at the left are filled with 0's.

If you move each bit 2 times to the right, 8 becomes 2:
 8 = 0000000000001000
becomes
 2 = 0000000000000010

Decimal numbers and their binary values:
 0 = 0000000000000000
 1 = 0000000000000001
 2 = 0000000000000010
 3 = 0000000000000011
 4 = 0000000000000100
 5 = 0000000000000101
 6 = 0000000000000110
 7 = 0000000000000111
 8 = 0000000000001000
 9 = 0000000000001001
10 = 0000000000001010
11 = 0000000000001011
12 = 0000000000001100

5.	Explain the concept of type casting in python with examples.
Type Casting is the method to convert the Python variable data type into a certain data type in order to perform the required operation by users. There can be two types of Type Casting in Python:

Python Implicit Type Conversion
Python Explicit Type Conversion

Python Implicit Type Conversion: In this, method, Python converts the data type into another data type automatically. Users don’t have to involve in this process.

# Python program to demonstrate 
# implicit type Casting 

# Python automatically converts 
# a to int 
a = 7
print(type(a)) 

# Python automatically converts 
# b to float 
b = 3.0
print(type(b)) 

# Python automatically converts 
# c to float as it is a float addition 
c = a + b 
print(c) 
print(type(c))

# Python automatically converts 
# d to float as it is a float multiplication
d = a * b
print(d)
print(type(d))

Output:
<class 'int'>
<class 'float'>
10.0
<class 'float'>
21.0
<class 'float'>

Explicit Type Conversion in Python: In this method, Python needs user involvement to convert the variable data type into the required data type.

Mainly type casting can be done with these data type functions:

Int(): Python Int() function take float or string as an argument and returns int type object.
float(): Python float() function take int or string as an argument and return float type object.
str(): Python str() function takes float or int as an argument and returns string type object.

Python Convert Int to Float
# Python program to demonstrate 
# type Casting 

# int variable
a = 5

# typecast to float
n = float(a)

print(n)
print(type(n))

Output:
5.0
<class 'float'>

Python Convert int to String

# Python program to demonstrate 
# type Casting 

# int variable
a = 5

# typecast to str
n = str(a)

print(n)
print(type(n))

Output:
5
<class 'str'>

•	Implicit Casting: This happens when the language automatically changes one data type into another to perform some operation. This is done by the compiler or interpreter without any code notation, and is often invisible to the user.
•	Explicit Casting: This requires the programmer to write code that instructs the compiler or interpreter to make a specific conversion. This is visible in the source code and is done intentionally by the programmer.

6.	How do conditional statements work in Python? Illustrate with examples.
Conditional statements are also called decision-making statements. We use those statements while we want 6. How do conditional statements work in Python? Illustrate with examples.
Conditional Statements are statements in Python that provide a choice for the control flow based on a condition. It means that the control flow of the Python program will be decided based on the outcome of the condition.

If Conditional Statement in Python:
If the simple code of block is to be performed if the condition holds then the if statement is used. Here the condition mentioned holds then the code of the block runs otherwise not.

# if statement example 
if 10 > 5: 
    print("10 greater than 5") 
  
print("Program ended")

Output:
10 greater than 5
Program ended

If else Conditional Statements in Python:
In a conditional if Statement the additional block of code is merged as an else statement which is performed when if condition is false.

# if..else statement example 
x = 3
if x == 4: 
    print("Yes") 
else: 
    print("No")

Output:
No

Nested if..else Conditional Statements in Python:
Nested if..else means an if-else statement inside another if statement. Or in simple words first, there is an outer if statement, and inside it another if – else statement is present and such type of statement is known as nested if statement. We can use one if or else if statement inside another if or else if statements.

# if..else chain statement 
letter = "A"
  
if letter == "B": 
    print("letter is B") 
  
else: 
  
    if letter == "C": 
        print("letter is C") 
  
    else: 
  
        if letter == "A": 
            print("letter is A") 
  
        else: 
            print("letter isn't A, B and C")

Output:
letter is A.

If-elif-else Conditional Statements in Python
The if statements are executed from the top down. As soon as one of the conditions controlling the if is true, the statement associated with that if is executed, and the rest of the ladder is bypassed. If none of the conditions is true, then the final “else” statement will be executed.

# if-elif statement example 
letter = "A"
  
if letter == "B": 
    print("letter is B") 
  
elif letter == "C": 
    print("letter is C") 
  
elif letter == "A": 
    print("letter is A") 
  
else: 
    print("letter isn't A, B or C")

Output:
letter is A.
7.	 Describe the different types of loops in Python and their use cases with examples.

Loop is used to repeat a particular task multiple times until a specific condition is met. It is to automate repetitive tasks.

Types of Loops in Python

There are two types of loops in Python :
For loop : This loop runs code for each item in a sequence. It's useful when you already know how many times it needs to repeat.
While loop : This loop runs code repeatedly until a specific condition is true. It's useful when you don't know the exact number of times it needs to repeat in advance.

For Loop

The syntax of a for loop in Python is as follows:

for item in sequence:
    # Code to be executed for each item
Example 1 : Suppose you are asked to print numbers from 1 to 9, increment by 2.

for i in range(1,10,2):
  print(i)

# Output
# 1
# 3
# 5
# 7
# 9
range(1,10,2) means starts from 1 and ends with 9 (excluding 10), increment by 2.

Example 2 : Suppose you are asked to run for loop on a list.

mylist = [30,21,33,42,53,64,71,86,97,10]
for i in mylist:
    print(i)
    
# Output   
# 30
# 21
# 33
# 42
# 53
# 64
# 71
# 86
# 97
# 10
Example 3 : Suppose you need to select every 3rd value of list.

for i in mylist[::3]:
    print(i)
    
# Output
# 30
# 42
# 71
# 10
mylist[::3] is equivalent to mylist[0::3] which follows this syntax style list[start:stop:step]

While Loop

While loop is used to execute code repeatedly until a condition is met. And when the condition becomes false, the loop stops and then the line immediately after the loop in program is executed.

The syntax of a while loop in Python is as follows:
while condition:
    # This code will continue executing as long as the condition is True

Example : The while loop below prints odd numbers less than 10.

i = 1  # Initialize i to 1
while i < 10:  # Loop continues until i is less than 10
    print("i: ",i)  # Print the current value of i
    i += 2  # Increment i by 2 (same as i = i + 2)

# Output
# i:  1
# i:  3
# i:  5
# i:  7
# i:  9
